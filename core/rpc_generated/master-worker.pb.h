// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: master-worker.proto

#ifndef PROTOBUF_INCLUDED_master_2dworker_2eproto
#define PROTOBUF_INCLUDED_master_2dworker_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_master_2dworker_2eproto 

namespace protobuf_master_2dworker_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[2];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_master_2dworker_2eproto
namespace masterworker {
class Filename;
class FilenameDefaultTypeInternal;
extern FilenameDefaultTypeInternal _Filename_default_instance_;
class Filenames;
class FilenamesDefaultTypeInternal;
extern FilenamesDefaultTypeInternal _Filenames_default_instance_;
}  // namespace masterworker
namespace google {
namespace protobuf {
template<> ::masterworker::Filename* Arena::CreateMaybeMessage<::masterworker::Filename>(Arena*);
template<> ::masterworker::Filenames* Arena::CreateMaybeMessage<::masterworker::Filenames>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace masterworker {

// ===================================================================

class Filename : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:masterworker.Filename) */ {
 public:
  Filename();
  virtual ~Filename();

  Filename(const Filename& from);

  inline Filename& operator=(const Filename& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filename(Filename&& from) noexcept
    : Filename() {
    *this = ::std::move(from);
  }

  inline Filename& operator=(Filename&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filename& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filename* internal_default_instance() {
    return reinterpret_cast<const Filename*>(
               &_Filename_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Filename* other);
  friend void swap(Filename& a, Filename& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filename* New() const final {
    return CreateMaybeMessage<Filename>(NULL);
  }

  Filename* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filename>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filename& from);
  void MergeFrom(const Filename& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filename* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filename = 1;
  void clear_filename();
  static const int kFilenameFieldNumber = 1;
  const ::std::string& filename() const;
  void set_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_filename(::std::string&& value);
  #endif
  void set_filename(const char* value);
  void set_filename(const char* value, size_t size);
  ::std::string* mutable_filename();
  ::std::string* release_filename();
  void set_allocated_filename(::std::string* filename);

  // @@protoc_insertion_point(class_scope:masterworker.Filename)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filename_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_2dworker_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Filenames : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:masterworker.Filenames) */ {
 public:
  Filenames();
  virtual ~Filenames();

  Filenames(const Filenames& from);

  inline Filenames& operator=(const Filenames& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Filenames(Filenames&& from) noexcept
    : Filenames() {
    *this = ::std::move(from);
  }

  inline Filenames& operator=(Filenames&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Filenames& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Filenames* internal_default_instance() {
    return reinterpret_cast<const Filenames*>(
               &_Filenames_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(Filenames* other);
  friend void swap(Filenames& a, Filenames& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Filenames* New() const final {
    return CreateMaybeMessage<Filenames>(NULL);
  }

  Filenames* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Filenames>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Filenames& from);
  void MergeFrom(const Filenames& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Filenames* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string filenames = 1;
  void clear_filenames();
  static const int kFilenamesFieldNumber = 1;
  const ::std::string& filenames() const;
  void set_filenames(const ::std::string& value);
  #if LANG_CXX11
  void set_filenames(::std::string&& value);
  #endif
  void set_filenames(const char* value);
  void set_filenames(const char* value, size_t size);
  ::std::string* mutable_filenames();
  ::std::string* release_filenames();
  void set_allocated_filenames(::std::string* filenames);

  // @@protoc_insertion_point(class_scope:masterworker.Filenames)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr filenames_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_master_2dworker_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Filename

// string filename = 1;
inline void Filename::clear_filename() {
  filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Filename::filename() const {
  // @@protoc_insertion_point(field_get:masterworker.Filename.filename)
  return filename_.GetNoArena();
}
inline void Filename::set_filename(const ::std::string& value) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterworker.Filename.filename)
}
#if LANG_CXX11
inline void Filename::set_filename(::std::string&& value) {
  
  filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterworker.Filename.filename)
}
#endif
inline void Filename::set_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterworker.Filename.filename)
}
inline void Filename::set_filename(const char* value, size_t size) {
  
  filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterworker.Filename.filename)
}
inline ::std::string* Filename::mutable_filename() {
  
  // @@protoc_insertion_point(field_mutable:masterworker.Filename.filename)
  return filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filename::release_filename() {
  // @@protoc_insertion_point(field_release:masterworker.Filename.filename)
  
  return filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filename::set_allocated_filename(::std::string* filename) {
  if (filename != NULL) {
    
  } else {
    
  }
  filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filename);
  // @@protoc_insertion_point(field_set_allocated:masterworker.Filename.filename)
}

// -------------------------------------------------------------------

// Filenames

// string filenames = 1;
inline void Filenames::clear_filenames() {
  filenames_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Filenames::filenames() const {
  // @@protoc_insertion_point(field_get:masterworker.Filenames.filenames)
  return filenames_.GetNoArena();
}
inline void Filenames::set_filenames(const ::std::string& value) {
  
  filenames_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:masterworker.Filenames.filenames)
}
#if LANG_CXX11
inline void Filenames::set_filenames(::std::string&& value) {
  
  filenames_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:masterworker.Filenames.filenames)
}
#endif
inline void Filenames::set_filenames(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  filenames_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:masterworker.Filenames.filenames)
}
inline void Filenames::set_filenames(const char* value, size_t size) {
  
  filenames_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:masterworker.Filenames.filenames)
}
inline ::std::string* Filenames::mutable_filenames() {
  
  // @@protoc_insertion_point(field_mutable:masterworker.Filenames.filenames)
  return filenames_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Filenames::release_filenames() {
  // @@protoc_insertion_point(field_release:masterworker.Filenames.filenames)
  
  return filenames_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Filenames::set_allocated_filenames(::std::string* filenames) {
  if (filenames != NULL) {
    
  } else {
    
  }
  filenames_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), filenames);
  // @@protoc_insertion_point(field_set_allocated:masterworker.Filenames.filenames)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace masterworker

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_master_2dworker_2eproto
